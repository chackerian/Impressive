{"version":3,"file":"Facebook.js","sourceRoot":"","sources":["../src/Facebook.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EAEL,gBAAgB,GAEjB,MAAM,kCAAkC,CAAC;AAE1C,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAQlD,OAAO,EAKL,gBAAgB,GAEjB,CAAC;AAEF,MAAM,0BAA0B,GAAuB;IACrD,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,OAAO;IAChB,WAAW,EAAE,IAAI;IACjB,MAAM,EAAE,gBAAgB,CAAC,OAAO;CACjC,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,uBAAuB;IAC3C,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;KACpD;IAED,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,EAAE;QAC7C,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,yBAAyB,CAAC,CAAC;KACtE;IACD,OAAO,MAAM,gBAAgB,CAAC,uBAAuB,EAAE,CAAC;AAC1D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB;IACvC,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;KACpD;IAED,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,EAAE;QACzC,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC;KAClE;IACD,OAAO,MAAM,gBAAgB,CAAC,mBAAmB,EAAE,CAAC;AACtD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,6BAA6B,CACjD,UAA2B,EAAE;IAE7B,IAAI,CAAC,gBAAgB,CAAC,6BAA6B,EAAE;QACnD,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,+BAA+B,CAAC,CAAC;KAC5E;IAED,MAAM,iBAAiB,GAAG,MAAM,gBAAgB,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC;IAExF,OAAO,kCAAkC,CAAC,iBAAiB,CAAC,CAAC;AAC/D,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,gCAAgC;IACpD,IAAI,CAAC,gBAAgB,CAAC,gCAAgC,EAAE;QACtD,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,kCAAkC,CAAC,CAAC;KAC/E;IAED,MAAM,uBAAuB,GAAG,MAAM,gBAAgB,CAAC,gCAAgC,EAAE,CAAC;IAE1F,OAAO,+CAA+C,CAAC,uBAAuB,CAAC,CAAC;AAClF,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW;IAC/B,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE;QACjC,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;KAC1D;IAED,MAAM,gBAAgB,CAAC,WAAW,EAAE,CAAC;AACvC,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,KAAK,UAAU,iCAAiC,CAAC,OAAgB;IACtE,IAAI,CAAC,gBAAgB,CAAC,iCAAiC,EAAE;QACvD,OAAO,KAAK,CAAC;KACd;IACD,OAAO,MAAM,gBAAgB,CAAC,iCAAiC,CAAC,OAAO,CAAC,CAAC;AAC3E,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,KAAK,UAAU,+BAA+B,CAAC,OAAgB;IACpE,IAAI,CAAC,gBAAgB,CAAC,+BAA+B,EAAE;QACrD,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,iCAAiC,CAAC,CAAC;KAC9E;IACD,MAAM,gBAAgB,CAAC,+BAA+B,CAAC,OAAO,CAAC,CAAC;AAClE,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,OAAgB;IAC5D,OAAO,CAAC,IAAI,CACV,6HAA6H,CAC9H,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,cAAsD,EACtD,OAAgB;IAEhB,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE;QACrC,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;KAC9D;IAED,IAAI,OAAO,GAAkC,EAAE,CAAC;IAEhD,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACtC,OAAO,CAAC,KAAK,GAAG,cAAc,CAAC;QAC/B,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;QAC1B,OAAO,CAAC,IAAI,CACV,4KAA4K,CAC7K,CAAC;KACH;SAAM;QACL,OAAO,GAAG,cAAc,CAAC;KAC1B;IAED,MAAM,gBAAgB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,KAAK,UAAU,qCAAqC,CAAC,OAAgB;IAC1E,IAAI,CAAC,gBAAgB,CAAC,qCAAqC,EAAE;QAC3D,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,uCAAuC,CAAC,CAAC;KACpF;IACD,MAAM,gBAAgB,CAAC,qCAAqC,CAAC,OAAO,CAAC,CAAC;AACxE,CAAC;AAED,SAAS,kCAAkC,CAAC,KAA0B;IACpE,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAE1C,OAAO;QACL,GAAG,KAAK;QACR,WAAW,EACT,OAAO,KAAK,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW;QACzF,wBAAwB,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC;QAClE,cAAc,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;KAC/C,CAAC;AACJ,CAAC;AAED,SAAS,+CAA+C,CACtD,KAAU;IAEV,IAAI,CAAC,KAAK;QAAE,OAAO,KAAK,CAAC;IACzB,OAAO;QACL,GAAG,KAAK;QACR,WAAW,EACT,OAAO,KAAK,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW;QACzF,wBAAwB,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC;QAClE,cAAc,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;KAC/C,CAAC;AACJ,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { Platform } from 'react-native';\nimport {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n} from 'unimodules-permissions-interface';\n\nimport ExponentFacebook from './ExponentFacebook';\nimport {\n  FacebookAuthenticationCredential,\n  FacebookLoginResult,\n  FacebookOptions,\n  FacebookInitializationOptions,\n} from './Facebook.types';\n\nexport {\n  FacebookLoginResult,\n  FacebookOptions,\n  FacebookAuthenticationCredential,\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n};\n\nconst androidPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS === 'android') {\n    return Promise.resolve(androidPermissionsResponse);\n  }\n\n  if (!ExponentFacebook.requestPermissionsAsync) {\n    throw new UnavailabilityError('Facebook', 'requestPermissionsAsync');\n  }\n  return await ExponentFacebook.requestPermissionsAsync();\n}\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS === 'android') {\n    return Promise.resolve(androidPermissionsResponse);\n  }\n\n  if (!ExponentFacebook.getPermissionsAsync) {\n    throw new UnavailabilityError('Facebook', 'getPermissionsAsync');\n  }\n  return await ExponentFacebook.getPermissionsAsync();\n}\n\nexport async function logInWithReadPermissionsAsync(\n  options: FacebookOptions = {}\n): Promise<FacebookLoginResult> {\n  if (!ExponentFacebook.logInWithReadPermissionsAsync) {\n    throw new UnavailabilityError('Facebook', 'logInWithReadPermissionsAsync');\n  }\n\n  const nativeLoginResult = await ExponentFacebook.logInWithReadPermissionsAsync(options);\n\n  return transformNativeFacebookLoginResult(nativeLoginResult);\n}\n\n/**\n * Returns the `FacebookAuthenticationCredential` object if a user is authenticated, and `null` if no valid authentication exists.\n *\n * You can use this method to check if the user should sign in or not.\n */\nexport async function getAuthenticationCredentialAsync(): Promise<FacebookAuthenticationCredential | null> {\n  if (!ExponentFacebook.getAuthenticationCredentialAsync) {\n    throw new UnavailabilityError('Facebook', 'getAuthenticationCredentialAsync');\n  }\n\n  const nativeAccessTokenResult = await ExponentFacebook.getAuthenticationCredentialAsync();\n\n  return transformNativeFacebookAuthenticationCredential(nativeAccessTokenResult);\n}\n\n/**\n * Logs out of the currently authenticated session.\n */\nexport async function logOutAsync(): Promise<void> {\n  if (!ExponentFacebook.logOutAsync) {\n    throw new UnavailabilityError('Facebook', 'logOutAsync');\n  }\n\n  await ExponentFacebook.logOutAsync();\n}\n\n/**\n * Sets whether Facebook SDK should enable advertising tracking,\n * (more info [here](https://developers.facebook.com/docs/app-events/guides/advertising-tracking-enabled)).\n *\n * Limitations:\n * 1. AdvertiserTrackingEnabled is only available for iOS 14+.\n * 2. For iOS 13 or earlier, AdvertiserTrackingEnabled uses the Limit Ad Tracking setting as its value.\n *\n * This method corresponds to [this](https://developers.facebook.com/docs/app-events/guides/advertising-tracking-enabled)\n *\n * @param enabled Whether advertising tracking of the Facebook SDK should be enabled\n * @return Whether the value is set successfully. It will always return false in Android, iOS 13 and below.\n */\nexport async function setAdvertiserTrackingEnabledAsync(enabled: boolean): Promise<boolean> {\n  if (!ExponentFacebook.setAdvertiserTrackingEnabledAsync) {\n    return false;\n  }\n  return await ExponentFacebook.setAdvertiserTrackingEnabledAsync(enabled);\n}\n\n/**\n * Sets whether Facebook SDK should log app events. App events involve eg. app installs,\n * app launches (more info [here](https://developers.facebook.com/docs/app-events/getting-started-app-events-android/#auto-events)\n * and [here](https://developers.facebook.com/docs/app-events/getting-started-app-events-ios#auto-events)).\n *\n * In some cases, you may want to disable or delay the collection of automatically logged events,\n * such as to obtain user consent or fulfill legal obligations.\n *\n * This method corresponds to [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-ios#disable-auto-events)\n * and [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-android/#disable-auto-events) native SDK methods.\n *\n * @param enabled Whether automatic events logging of the Facebook SDK should be enabled\n */\nexport async function setAutoLogAppEventsEnabledAsync(enabled: boolean): Promise<void> {\n  if (!ExponentFacebook.setAutoLogAppEventsEnabledAsync) {\n    throw new UnavailabilityError('Facebook', 'setAutoLogAppEventsEnabledAsync');\n  }\n  await ExponentFacebook.setAutoLogAppEventsEnabledAsync(enabled);\n}\n\n/**\n * @deprecated Explicitly call `initializeAsync` instead.\n */\nexport async function setAutoInitEnabledAsync(enabled: boolean): Promise<void> {\n  console.warn(\n    'The `autoInitEnabled` option has been removed from Facebook SDK â€” we recommend to explicitly use `initializeAsync` instead.'\n  );\n}\n\n/**\n * Calling this method ensures that the SDK is initialized.\n * You have to call this method before calling any method that uses\n * the FBSDK (ex: `logInWithReadPermissionsAsync`, `logOutAsync`) to ensure that\n * Facebook support is initialized properly.\n *\n * - On Android and iOS you can optionally provide an `appId` argument.\n *   - If you don't provide `appId`, the Facebook SDK will try to use `appId` from native app resources (which in standalone apps you define in `app.json`, in app store development clients are unavailable, and in bare apps you configure yourself according to [Facebook's setup documentation for iOS](https://developers.facebook.com/docs/facebook-login/ios#4--configure-your-project) and [Android](https://developers.facebook.com/docs/facebook-login/android#manifest)). If the Facebook SDK fails to find an `appId` value, the returned promise will be rejected.\n *   - The same resolution mechanism works for `appName`.\n * - If you provide an explicit `appId`, it will override any other source.\n *\n * @param options The options used to configure how Facebook is initialized\n */\nexport async function initializeAsync(\n  optionsOrAppId: FacebookInitializationOptions | string,\n  appName?: string\n): Promise<void> {\n  if (!ExponentFacebook.initializeAsync) {\n    throw new UnavailabilityError('Facebook', 'initializeAsync');\n  }\n\n  let options: FacebookInitializationOptions = {};\n\n  if (typeof optionsOrAppId === 'string') {\n    options.appId = optionsOrAppId;\n    options.appName = appName;\n    console.warn(\n      'The parameters of `initializeAsync(appId, appName)` have changed to support future platforms, you must now provide an object instead: initializeAsync({ appId, appName }).'\n    );\n  } else {\n    options = optionsOrAppId;\n  }\n\n  await ExponentFacebook.initializeAsync(options);\n}\n\n/**\n * Whether the Facebook SDK should collect advertiser ID properties, like the Apple IDFA\n * and Android Advertising ID, automatically. Advertiser IDs let you identify and target specific customers.\n * To learn more visit [Facebook documentation](https://developers.facebook.com/docs/app-ads/targeting/mobile-advertiser-ids)\n * describing that topic.\n *\n * In some cases, you may want to disable or delay the collection of `advertiser-id`,\n * such as to obtain user consent or fulfill legal obligations.\n *\n * This method corresponds to [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-ios#disable-advertiser-id)\n * and [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-android/#disable-advertiser-id) native SDK methods.\n * @param enabled Whether `advertiser-id` should be collected\n */\nexport async function setAdvertiserIDCollectionEnabledAsync(enabled: boolean): Promise<void> {\n  if (!ExponentFacebook.setAdvertiserIDCollectionEnabledAsync) {\n    throw new UnavailabilityError('Facebook', 'setAdvertiserIDCollectionEnabledAsync');\n  }\n  await ExponentFacebook.setAdvertiserIDCollectionEnabledAsync(enabled);\n}\n\nfunction transformNativeFacebookLoginResult(input: FacebookLoginResult): FacebookLoginResult {\n  if (input.type === 'cancel') return input;\n\n  return {\n    ...input,\n    refreshDate:\n      typeof input.refreshDate === 'number' ? new Date(input.refreshDate) : input.refreshDate,\n    dataAccessExpirationDate: new Date(input.dataAccessExpirationDate),\n    expirationDate: new Date(input.expirationDate),\n  };\n}\n\nfunction transformNativeFacebookAuthenticationCredential(\n  input: any\n): FacebookAuthenticationCredential | null {\n  if (!input) return input;\n  return {\n    ...input,\n    refreshDate:\n      typeof input.refreshDate === 'number' ? new Date(input.refreshDate) : input.refreshDate,\n    dataAccessExpirationDate: new Date(input.dataAccessExpirationDate),\n    expirationDate: new Date(input.expirationDate),\n  };\n}\n"]}