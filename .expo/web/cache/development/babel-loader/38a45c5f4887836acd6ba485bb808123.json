{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/nathanchackerian/Desktop/Impressive/node_modules/react-native-interactable/lib/src/InteractableView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ReactNative from \"react-native-web/dist/index\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar NativeViewManager = NativeModules.InteractableViewManager;\nvar NativeInteractableView = requireNativeComponent('InteractableView', null);\n\nvar WrappedInteractableView = function (_Component) {\n  _inherits(WrappedInteractableView, _Component);\n\n  var _super = _createSuper(WrappedInteractableView);\n\n  function WrappedInteractableView() {\n    _classCallCheck(this, WrappedInteractableView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WrappedInteractableView, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(NativeInteractableView, _extends({}, this.props, {\n        ref: function ref(_ref) {\n          return _this._nativeViewRef = _ref;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"getScrollableNode\",\n    value: function getScrollableNode() {\n      return ReactNative.findNodeHandle(this._nativeViewRef);\n    }\n  }]);\n\n  return WrappedInteractableView;\n}(Component);\n\nvar AnimatedInteractableView = Animated.createAnimatedComponent(WrappedInteractableView);\n\nvar WrappedAnimatedInteractableView = function (_Component2) {\n  _inherits(WrappedAnimatedInteractableView, _Component2);\n\n  var _super2 = _createSuper(WrappedAnimatedInteractableView);\n\n  function WrappedAnimatedInteractableView(props) {\n    var _this2;\n\n    _classCallCheck(this, WrappedAnimatedInteractableView);\n\n    _this2 = _super2.call(this, props);\n\n    if (_this2.props.animatedValueX || _this2.props.animatedValueY) {\n      _this2._animatedEvent = Animated.event([{\n        nativeEvent: {\n          x: _this2.props.animatedValueX,\n          y: _this2.props.animatedValueY\n        }\n      }], {\n        useNativeDriver: !!_this2.props.animatedNativeDriver\n      });\n    }\n\n    return _this2;\n  }\n\n  _createClass(WrappedAnimatedInteractableView, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(AnimatedInteractableView, _extends({\n        dragToss: 0.1\n      }, this.props, {\n        animatedValueX: undefined,\n        animatedValueY: undefined,\n        onAnimatedEvent: this._animatedEvent,\n        reportOnAnimatedEvents: !!this._animatedEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"setVelocity\",\n    value: function setVelocity(params) {\n      if (Platform.OS === 'ios') {\n        NativeViewManager.setVelocity(ReactNative.findNodeHandle(this), params);\n      } else if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.InteractableView.Commands.setVelocity, [params]);\n      }\n    }\n  }, {\n    key: \"snapTo\",\n    value: function snapTo(params) {\n      if (Platform.OS === 'ios') {\n        NativeViewManager.snapTo(ReactNative.findNodeHandle(this), params);\n      } else if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.InteractableView.Commands.snapTo, [params]);\n      }\n    }\n  }, {\n    key: \"changePosition\",\n    value: function changePosition(params) {\n      if (Platform.OS === 'ios') {\n        NativeViewManager.changePosition(ReactNative.findNodeHandle(this), params);\n      } else if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.InteractableView.Commands.changePosition, [params]);\n      }\n    }\n  }, {\n    key: \"bringToFront\",\n    value: function bringToFront() {\n      if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.InteractableView.Commands.bringToFront, []);\n      }\n    }\n  }]);\n\n  return WrappedAnimatedInteractableView;\n}(Component);\n\nexport default WrappedAnimatedInteractableView;","map":{"version":3,"sources":["/Users/nathanchackerian/Desktop/Impressive/node_modules/react-native-interactable/lib/src/InteractableView.js"],"names":["React","Component","ReactNative","requireNativeComponent","NativeViewManager","NativeModules","InteractableViewManager","NativeInteractableView","WrappedInteractableView","props","ref","_nativeViewRef","findNodeHandle","AnimatedInteractableView","Animated","createAnimatedComponent","WrappedAnimatedInteractableView","animatedValueX","animatedValueY","_animatedEvent","event","nativeEvent","x","y","useNativeDriver","animatedNativeDriver","undefined","params","Platform","OS","setVelocity","UIManager","dispatchViewManagerCommand","InteractableView","Commands","snapTo","changePosition","bringToFront"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactNative, { requireNativeComponent, Animated, NativeModules, UIManager, Platform } from 'react-native';\n\n// this is required in order to perform imperative commands\nconst NativeViewManager = NativeModules.InteractableViewManager;\n\nconst NativeInteractableView = requireNativeComponent('InteractableView', null);\n\nclass WrappedInteractableView extends Component {\n  render() {\n    return (\n      <NativeInteractableView\n        {...this.props}\n        ref={(ref) => this._nativeViewRef = ref}\n      />\n    );\n  }\n\n  getScrollableNode() {\n    return ReactNative.findNodeHandle(this._nativeViewRef);\n  }\n}\n\n// this is required in order to support native events:\nconst AnimatedInteractableView = Animated.createAnimatedComponent(WrappedInteractableView);\n\nclass WrappedAnimatedInteractableView extends Component {\n  constructor(props) {\n    super(props);\n    if (this.props.animatedValueX || this.props.animatedValueY) {\n      this._animatedEvent = Animated.event(\n        [{\n          nativeEvent: {\n            x: this.props.animatedValueX,\n            y: this.props.animatedValueY\n          }\n        }],\n        { useNativeDriver: !!this.props.animatedNativeDriver }\n      );\n    }\n  }\n\n  // this helps us verify that useNativeDriver actually works and we don't rely on the bridge - should be called in the constructor\n  /* \n  chokeTheBridge() {\n    let j = 0;\n    setInterval(() => {\n      for (var index = 0; index < 1e9; index++) {\n        j++;\n      }\n    }, 500);\n  }\n  */\n\n  render() {\n    return (\n      <AnimatedInteractableView\n        dragToss={0.1}\n        {...this.props}\n        animatedValueX={undefined}\n        animatedValueY={undefined}\n        onAnimatedEvent={this._animatedEvent}\n        reportOnAnimatedEvents={!!this._animatedEvent}\n      />\n    );\n  }\n\n  setVelocity(params) {\n    if (Platform.OS === 'ios') {\n      NativeViewManager.setVelocity(ReactNative.findNodeHandle(this), params);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        ReactNative.findNodeHandle(this),\n        UIManager.InteractableView.Commands.setVelocity,\n        [params],\n      );\n    }\n  }\n\n  snapTo(params) {\n    if (Platform.OS === 'ios') {\n      NativeViewManager.snapTo(ReactNative.findNodeHandle(this), params);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        ReactNative.findNodeHandle(this),\n        UIManager.InteractableView.Commands.snapTo,\n        [params],\n      );\n    }\n  }\n\n  changePosition(params) {\n    if (Platform.OS === 'ios') {\n      NativeViewManager.changePosition(ReactNative.findNodeHandle(this), params);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        ReactNative.findNodeHandle(this),\n        UIManager.InteractableView.Commands.changePosition,\n        [params],\n      );\n    }\n  }\n\n  bringToFront() {\n    if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        ReactNative.findNodeHandle(this),\n        UIManager.InteractableView.Commands.bringToFront,\n        [],\n      );\n    }\n  }\n}\n\nexport default WrappedAnimatedInteractableView;\n"]},"metadata":{},"sourceType":"module"}