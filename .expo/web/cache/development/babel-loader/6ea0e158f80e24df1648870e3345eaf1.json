{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport { useMemo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function applyRequiredScopes() {\n  var scopes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var requiredScopes = arguments.length > 1 ? arguments[1] : undefined;\n  return _toConsumableArray(new Set([].concat(_toConsumableArray(scopes), _toConsumableArray(requiredScopes))));\n}\nexport function shouldUseProxy() {\n  return Platform.select({\n    web: false,\n    default: Constants.executionEnvironment === ExecutionEnvironment.StoreClient\n  });\n}\nexport function invariantClientId(idName, value, providerName) {\n  if (typeof value === 'undefined') throw new Error(\"Client Id property `\" + idName + \"` must be defined to use \" + providerName + \" auth on this platform.\");\n}\nexport function useProxyEnabled(redirectUriOptions) {\n  return useMemo(function () {\n    var _redirectUriOptions$u;\n\n    return (_redirectUriOptions$u = redirectUriOptions.useProxy) != null ? _redirectUriOptions$u : shouldUseProxy();\n  }, [redirectUriOptions.useProxy]);\n}","map":{"version":3,"sources":["../../src/providers/ProviderUtils.ts"],"names":[],"mappings":";AAAA,OAAO,SAAP,IAAoB,oBAApB,QAAgD,gBAAhD;AACA,SAAS,OAAT,QAAwB,OAAxB;;AAKA,OAAM,SAAU,mBAAV,GAA6E;AAAA,MAA/C,MAA+C,uEAA5B,EAA4B;AAAA,MAAxB,cAAwB;AAGjF,4BAAW,IAAI,GAAJ,8BAAY,MAAZ,sBAAuB,cAAvB,GAAX;AACD;AAGD,OAAM,SAAU,cAAV,GAAwB;AAC5B,SAAO,QAAQ,CAAC,MAAT,CAAgB;AACrB,IAAA,GAAG,EAAE,KADgB;AAGrB,IAAA,OAAO,EAAE,SAAS,CAAC,oBAAV,KAAmC,oBAAoB,CAAC;AAH5C,GAAhB,CAAP;AAKD;AAED,OAAM,SAAU,iBAAV,CAA4B,MAA5B,EAA4C,KAA5C,EAAwD,YAAxD,EAA4E;AAChF,MAAI,OAAO,KAAP,KAAiB,WAArB,EAEE,MAAM,IAAI,KAAJ,0BACoB,MADpB,iCACuD,YADvD,6BAAN;AAGH;AAED,OAAM,SAAU,eAAV,CACJ,kBADI,EAC+D;AAEnE,SAAO,OAAO,CAAC;AAAA;;AAAA,oCAAM,kBAAkB,CAAC,QAAzB,oCAAqC,cAAc,EAAnD;AAAA,GAAD,EAAwD,CACpE,kBAAkB,CAAC,QADiD,CAAxD,CAAd;AAGD","sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport { useMemo } from 'react';\nimport { Platform } from 'react-native';\n\nimport { AuthSessionRedirectUriOptions } from '../AuthSession';\n\nexport function applyRequiredScopes(scopes: string[] = [], requiredScopes: string[]): string[] {\n  // Add the required scopes for returning profile data.\n  // Remove duplicates\n  return [...new Set([...scopes, ...requiredScopes])];\n}\n\n// Only natively in the Expo client.\nexport function shouldUseProxy(): boolean {\n  return Platform.select({\n    web: false,\n    // Use the proxy in the Expo client.\n    default: Constants.executionEnvironment === ExecutionEnvironment.StoreClient,\n  });\n}\n\nexport function invariantClientId(idName: string, value: any, providerName: string) {\n  if (typeof value === 'undefined')\n    // TODO(Bacon): Add learn more\n    throw new Error(\n      `Client Id property \\`${idName}\\` must be defined to use ${providerName} auth on this platform.`\n    );\n}\n\nexport function useProxyEnabled(\n  redirectUriOptions: Pick<AuthSessionRedirectUriOptions, 'useProxy'>\n): boolean {\n  return useMemo(() => redirectUriOptions.useProxy ?? shouldUseProxy(), [\n    redirectUriOptions.useProxy,\n  ]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}