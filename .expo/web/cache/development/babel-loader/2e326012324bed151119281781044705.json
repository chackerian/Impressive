{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nathanchackerian/Desktop/Impressive/screens/SwipeScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component, useState, useEffect, useRef, createRef, setState } from 'react';\nimport Background from \"./Background\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport NavSwipe from \"./NavSwipe\";\nimport CardStack, { Card } from \"./swipe\";\nimport { storage, store } from \"../App.js\";\nimport firebase from 'firebase/app';\nimport { useNavigation } from '@react-navigation/native';\nimport Alerts from \"./Alerts.js\";\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome';\nimport { faHeart, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nvar SCREEN_HEIGHT = Dimensions.get('window').height;\nvar SCREEN_WIDTH = Dimensions.get('window').width;\nexport default function SwipeScreen(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      images = _useState2[0],\n      setImages = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      swiper = _useState4[0],\n      setSwiper = _useState4[1];\n\n  var _useState5 = useState(createRef()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      slide = _useState6[0],\n      setSlide = _useState6[1];\n\n  var navigation = useNavigation();\n  var alertRef = React.createRef();\n  var styles = StyleSheet.create({\n    image: {\n      opacity: 1,\n      height: 420\n    },\n    info: {\n      padding: 30,\n      color: 'white',\n      fontWeight: \"bold\",\n      backgroundColor: \"#313174\"\n    },\n    description: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: 'white',\n      marginLeft: 12\n    },\n    viewport: {\n      height: 250,\n      marginTop: '80%',\n      alignItems: 'center'\n    },\n    button: {\n      width: 50\n    },\n    buttonContainer: {\n      flexDirection: 'row',\n      justifyContent: 'space-evenly'\n    },\n    content: {\n      flex: 5,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    card: {\n      width: 320,\n      borderRadius: 5,\n      shadowOffset: {\n        width: 40,\n        height: 40\n      },\n      shadowColor: 'green',\n      shadowOpacity: 0.8,\n      shadowOffset: {\n        width: 0,\n        height: 1\n      },\n      shadowOpacity: 0.5\n    },\n    label: {\n      marginLeft: 12,\n      fontSize: 25,\n      color: 'white',\n      fontWeight: 'bold',\n      fontFamily: 'System',\n      backgroundColor: 'transparent'\n    }\n  });\n\n  function cards() {\n    var user, userLikes, userDislikes, interacted, batches, snaps, x, snapshot, images;\n    return _regeneratorRuntime.async(function cards$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(store.collection(\"users\").doc(props.route.params.user.email).get());\n\n          case 2:\n            user = _context.sent;\n            userLikes = user.data().likes || [];\n            userDislikes = user.data().dislikes || [];\n            interacted = userLikes.concat(userDislikes);\n            batches = [];\n\n            while (interacted.length) {\n              batches.push(interacted.splice(0, 10));\n            }\n\n            snaps = [];\n            x = 0;\n\n          case 10:\n            if (!(x < batches.length)) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(store.collection(\"users\").where(\"email\", \"not-in\", batches[x]).get());\n\n          case 13:\n            snapshot = _context.sent;\n            snaps.push(snapshot);\n\n          case 15:\n            x++;\n            _context.next = 10;\n            break;\n\n          case 18:\n            console.log(snaps);\n            images = [];\n            snapshot.docs.forEach(function (s) {\n              images.push(s.data());\n            });\n            setImages(images);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    cards();\n  }, []);\n\n  function addLike(email) {\n    var snapshot, data;\n    return _regeneratorRuntime.async(function addLike$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"ADD LIKE\");\n            store.collection('users').doc(props.route.params.user.email).update({\n              likes: firebase.firestore.FieldValue.arrayUnion(email)\n            });\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(store.collection('users').doc(email).get());\n\n          case 4:\n            snapshot = _context2.sent;\n            data = snapshot.data();\n            console.log(\"PLATFORM\", Platform.OS);\n\n            if (Platform.OS == \"web\") {\n              new alertRef.current.slide();\n              alert(\"web\");\n            } else {\n              Alert.alert(\"New Match\", \"\", [{\n                text: \"Cancel\",\n                onPress: function onPress() {\n                  return console.log(\"Cancel Pressed\");\n                },\n                style: \"cancel\"\n              }, {\n                text: \"Go to Match\",\n                onPress: function onPress() {\n                  return console.log(\"OK Pressed\");\n                }\n              }]);\n            }\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var addDislike = function addDislike(email) {\n    store.collection('users').doc(props.route.params.user.email).update({\n      dislikes: firebase.firestore.FieldValue.arrayUnion(email)\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.body,\n    id: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, React.createElement(Alerts, {\n    ref: alertRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 6\n    }\n  }), React.createElement(NavSwipe, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 6\n    }\n  }), React.createElement(View, {\n    style: styles.viewport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 6\n    }\n  }, React.createElement(CardStack, {\n    style: styles.content,\n    ref: function ref(swiper) {\n      setSwiper(swiper);\n    },\n    onSwipeLeft: console.log(\"LEFT\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, images.map(function (i) {\n    var name = i.name.split(\" \")[0];\n    return React.createElement(Card, {\n      style: [styles.card],\n      key: i.name,\n      onSwipedRight: function onSwipedRight(event) {\n        return addLike(i.email);\n      },\n      onSwipedLeft: function onSwipedLeft(event) {\n        return addDislike(i.email);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: i.picture\n      },\n      style: styles.image,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }), React.createElement(View, {\n      style: styles.info,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.label,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 14\n      }\n    }, name, \", \", i.age), React.createElement(Text, {\n      style: styles.description,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 14\n      }\n    }, i.city, \", \", i.state)));\n  }))), React.createElement(View, {\n    style: styles.buttonContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: [styles.button],\n    onPress: function onPress() {\n      swiper.swipeLeft();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faTimesCircle,\n    color: '#ff2400',\n    size: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: [styles.button],\n    onPress: function onPress() {\n      swiper.swipeRight();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faHeart,\n    color: '#02ff02',\n    size: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/nathanchackerian/Desktop/Impressive/screens/SwipeScreen.js"],"names":["React","Component","useState","useEffect","useRef","createRef","setState","Background","NavSwipe","CardStack","Card","storage","store","firebase","useNavigation","Alerts","FontAwesomeIcon","faHeart","faTimesCircle","SCREEN_HEIGHT","Dimensions","get","height","SCREEN_WIDTH","width","SwipeScreen","props","images","setImages","swiper","setSwiper","slide","setSlide","navigation","alertRef","styles","StyleSheet","create","image","opacity","info","padding","color","fontWeight","backgroundColor","description","fontSize","marginLeft","viewport","marginTop","alignItems","button","buttonContainer","flexDirection","justifyContent","content","flex","card","borderRadius","shadowOffset","shadowColor","shadowOpacity","label","fontFamily","cards","collection","doc","route","params","user","email","userLikes","data","likes","userDislikes","dislikes","interacted","concat","batches","length","push","splice","snaps","x","where","snapshot","console","log","docs","forEach","s","addLike","update","firestore","FieldValue","arrayUnion","Platform","OS","current","alert","Alert","text","onPress","style","addDislike","body","map","i","name","split","event","uri","picture","age","city","state","swipeLeft","swipeRight"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect, useRef, createRef, setState} from 'react'\nimport Background from './Background'\nimport {StyleSheet, Image, TextInput, Text, View, Platform, Dimensions, PanResponder, Animated, TouchableOpacity, Alert } from 'react-native';\nimport NavSwipe from './NavSwipe';\nimport CardStack, { Card } from './swipe';\nimport { storage, store } from \"../App.js\";\nimport firebase from 'firebase/app';\n// import './nobounce.js'\nimport { useNavigation } from '@react-navigation/native';\nimport Alerts from './Alerts.js';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome';\nimport { faHeart, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst SCREEN_HEIGHT = Dimensions.get('window').height\nconst SCREEN_WIDTH = Dimensions.get('window').width\n\nexport default function SwipeScreen(props) {\n\n  const [images, setImages] = useState([]);\n  const [swiper, setSwiper] = useState();\n  const [slide, setSlide] = useState(createRef());\n  const navigation = useNavigation();\n  const alertRef = React.createRef();\n\n  const styles = StyleSheet.create({\n    image: {\n      opacity: 1,\n      height: 420,\n    },\n    info: {\n      padding: 30,\n      color: 'white',\n      fontWeight: \"bold\",\n      backgroundColor: \"#313174\",\n    },\n    description: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: 'white',\n      marginLeft: 12,\n    },\n    viewport: {\n      height: 250,\n      marginTop: '80%',\n      alignItems: 'center',\n    },\n    button: {\n      width: 50,\n    },\n    buttonContainer:{\n      flexDirection:'row',\n      justifyContent: 'space-evenly',\n    },\n    content:{\n      flex: 5,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    card:{\n      width: 320,\n      borderRadius: 5,\n      shadowOffset: {width: 40, height: 40},\n      shadowColor: 'green',\n      shadowOpacity: 0.8,\n      shadowOffset: {\n        width: 0,\n        height: 1\n      },\n      shadowOpacity:0.5,\n    },\n    label: {\n      marginLeft: 12,\n      fontSize: 25,\n      color: 'white',\n      fontWeight: 'bold',\n      fontFamily: 'System',\n      backgroundColor: 'transparent',\n    },\n  })\n\n  async function cards(){\n    const user = await store.collection(\"users\").doc(props.route.params.user.email).get()\n    const userLikes = user.data().likes || []\n    const userDislikes = user.data().dislikes || []\n\n    var interacted = userLikes.concat(userDislikes)\n    var batches = [];\n\n  //   while(interacted.length) {\n  //     const batch = interacted.splice(0, 10);\n\n  //   batches.push(\n  //     store.collection(\"users\")\n  //       .where(\n  //         \"email\",\n  //         'not-in',\n  //         [...batch]\n  //       )\n  //       .get()\n  //       .then(results => results.docs.map(result => ({ /* id: result.id, */ ...result.data() }) ))\n  //   )\n\n  // // after all of the data is fetched, return it\n  // return Promise.all(batches)\n  //   .then(content => content.flat());\n\n    while(interacted.length) {\n      batches.push(interacted.splice(0, 10));\n    }\n\n    var snaps = []\n    for(var x=0; x<batches.length; x++){\n      var snapshot = await store.collection(\"users\").where(\"email\", \"not-in\", batches[x]).get()\n      snaps.push(snapshot);\n    }\n  // }\n\n    console.log(snaps)\n\n    const images = [];\n\n    snapshot.docs.forEach((s) => {\n      images.push(s.data());\n    });\n    setImages(images);\n\n  }\n  \n  useEffect(() => {\n    cards()\n  }, [])\n\n  async function addLike(email){\n\n    console.log(\"ADD LIKE\")\n\n    store.collection('users').doc(props.route.params.user.email).update({\n      likes: firebase.firestore.FieldValue.arrayUnion(email)\n    })\n\n    const snapshot = await store.collection('users').doc(email).get();\n    const data = snapshot.data();\n\n    console.log(\"PLATFORM\", Platform.OS)\n\n    if (Platform.OS == \"web\") {\n      new alertRef.current.slide()\n      alert(\"web\")\n    } else {\n\n    Alert.alert(\n      \"New Match\",\n      \"\",\n      [\n        {\n          text: \"Cancel\",\n          onPress: () => console.log(\"Cancel Pressed\"),\n          style: \"cancel\"\n        },\n        { text: \"Go to Match\", onPress: () => console.log(\"OK Pressed\") }\n      ]\n    );\n\n    }\n\n     // Create convo\n\n  }\n\n  var addDislike = function(email){\n    store.collection('users').doc(props.route.params.user.email).update({\n      dislikes: firebase.firestore.FieldValue.arrayUnion(email)\n    })\n  }\n\n  return (\n    <View style={styles.body} id=\"main\">\n     <Alerts ref={alertRef}/>\n     <NavSwipe />\n     <View style={styles.viewport}>\n      <CardStack \n        style={styles.content}\n        ref={swiper => { setSwiper(swiper) }}\n        onSwipeLeft={console.log(\"LEFT\")}\n      >\n       {images.map((i) => {\n        var name = i.name.split(\" \")[0]\n        return (\n          <Card style={[styles.card]} key={i.name} \n            onSwipedRight={(event) => addLike(i.email)} \n            onSwipedLeft={(event) => addDislike(i.email)}\n          >\n            <Image source={{uri: i.picture}} style={styles.image} />\n            <View style={styles.info}> \n             <Text style={styles.label}>{name}, {i.age}</Text>\n             <Text style={styles.description}>{i.city}, {i.state}</Text>\n            </View>\n          </Card>\n          )\n        })}\n      </CardStack>\n     </View>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity style={[styles.button]} onPress={() => {\n          swiper.swipeLeft();\n        }}>\n          <FontAwesomeIcon icon={ faTimesCircle } color={ '#ff2400' } size={ 40 } />\n        </TouchableOpacity>\n        <TouchableOpacity style={[styles.button]} onPress={() => {\n          swiper.swipeRight();\n        }}>\n          <FontAwesomeIcon icon={ faHeart } color={ '#02ff02' } size={ 40 } />\n        </TouchableOpacity>\n      </View>\n    </View>\n  )\n}"]},"metadata":{},"sourceType":"module"}