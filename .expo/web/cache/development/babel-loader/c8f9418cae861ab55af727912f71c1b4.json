{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nathanchackerian/Desktop/Impressive/screens/ImageScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"./Button\";\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\nexport default function ImageScreen(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      url = _useState4[0],\n      setImageURL = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      color = _useState6[0],\n      setColorValue = _useState6[1];\n\n  var openImagePicker = function () {\n    var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var permissionResult, pickerResult;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return ImagePicker.requestMediaLibraryPermissionsAsync();\n\n            case 2:\n              permissionResult = _context.sent;\n              _context.next = 5;\n              return ImagePicker.launchImageLibraryAsync();\n\n            case 5:\n              pickerResult = _context.sent;\n              setImage(pickerResult.uri);\n\n              if (!pickerResult.cancelled) {\n                uploadImage(pickerResult.uri);\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function openImagePicker() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var setColor = function setColor(color) {\n    setColorValue(color);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    onClick: openImagePicker,\n    onDragOver: setColor('blue'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"asdas\");\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    marginTop: 30,\n    minHeight: 150,\n    borderRadius: 2,\n    borderStyle: 'dashed',\n    borderColor: 'black'\n  }\n});","map":{"version":3,"sources":["/Users/nathanchackerian/Desktop/Impressive/screens/ImageScreen.js"],"names":["React","useState","useEffect","ImagePicker","Button","firebase","ImageScreen","props","image","setImage","url","setImageURL","color","setColorValue","openImagePicker","requestMediaLibraryPermissionsAsync","permissionResult","launchImageLibraryAsync","pickerResult","uri","cancelled","uploadImage","setColor","styles","container","StyleSheet","create","alignItems","marginTop","minHeight","borderRadius","borderStyle","borderColor"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;;;;;AAEA,OAAOC,MAAP;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,kBAAP;AACA,OAAO,oBAAP;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAEzC,kBAA0BN,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOO,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA2BR,QAAQ,CAAC,EAAD,CAAnC;AAAA;AAAA,MAAOS,GAAP;AAAA,MAAYC,WAAZ;;AACA,mBAA+BV,QAAQ,CAAC,EAAD,CAAvC;AAAA;AAAA,MAAOW,KAAP;AAAA,MAAcC,aAAd;;AAuBA,MAAIC,eAAe;AAAA,0DAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACSX,WAAW,CAACY,mCAAZ,EADT;;AAAA;AAChBC,cAAAA,gBADgB;AAAA;AAAA,qBAEKb,WAAW,CAACc,uBAAZ,EAFL;;AAAA;AAEhBC,cAAAA,YAFgB;AAIpBT,cAAAA,QAAQ,CAACS,YAAY,CAACC,GAAd,CAAR;;AAEA,kBAAI,CAACD,YAAY,CAACE,SAAlB,EAA6B;AAC3BC,gBAAAA,WAAW,CAACH,YAAY,CAACC,GAAd,CAAX;AACD;;AARmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfL,eAAe;AAAA;AAAA;AAAA,KAAnB;;AAWA,MAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAACV,KAAD,EAAW;AAC1BC,IAAAA,aAAa,CAACD,KAAD,CAAb;AACD,GAFD;;AAIA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEW,MAAM,CAACC,SAApB;AACE,IAAA,OAAO,EAAEV,eADX;AAEE,IAAA,UAAU,EAAEQ,QAAQ,CAAC,MAAD,CAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ;AAQD;AAED,IAAMC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,SAAS,EAAE,EAFF;AAGTC,IAAAA,SAAS,EAAE,GAHF;AAITC,IAAAA,YAAY,EAAE,CAJL;AAKTC,IAAAA,WAAW,EAAE,QALJ;AAMTC,IAAAA,WAAW,EAAE;AANJ;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport * as ImagePicker from 'expo-image-picker';\nimport { Image, StyleSheet, Text, View } from \"react-native\";\nimport Button from './Button'\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\nexport default function ImageScreen(props) {\n\n  const [image, setImage] = useState(null);\n  const [url, setImageURL] = useState(\"\");\n  const [color, setColorValue] = useState(\"\");\n\n  // const uploadImage = async (uri) => {\n  //   const response = await fetch(uri);\n  //   const blob = await response.blob();\n\n  //   var filename = \"images/\" + \"IMG\" + Math.round(Math.random()*100)\n\n  //   var refs = firebase.storage().ref().child(filename);\n  //   refs.put(blob).then((snapshot) => {\n  //     firebase.storage().ref(filename).getDownloadURL()\n  //       .then((url) => {\n  //         setImageURL(url);\n  //         var user = props.route.params.user.email\n  //         firebase.firestore().collection('users').doc(user).update({\n  //           picture: url\n  //         })\n  //     })\n\n  //   })\n\n  // }\n\n  let openImagePicker = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n\n    setImage(pickerResult.uri);\n\n    if (!pickerResult.cancelled) {\n      uploadImage(pickerResult.uri)\n    }\n  }\n\n  const setColor = (color) => {\n    setColorValue(color)\n  }\n\n  return (\n      <View style={styles.container}\n        onClick={openImagePicker}\n        onDragOver={setColor('blue')}\n      >\n      asdas\n      </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    marginTop: 30,\n    minHeight: 150,\n    borderRadius: 2,\n    borderStyle: 'dashed',\n    borderColor: 'black',\n  }\n})"]},"metadata":{},"sourceType":"module"}