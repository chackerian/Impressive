{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/rando/Desktop/impress/screens/ImageScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport * as WebBrowser from \"expo-web-browser\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"./Button\";\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\nexport default function ImageScreen(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      url = _useState4[0],\n      setImageURL = _useState4[1];\n\n  var uploadImage = function uploadImage(uri) {\n    var response, blob, filename, refs;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 5:\n            blob = _context.sent;\n            filename = \"images/\" + \"IMG\" + Math.round(Math.random() * 100);\n            refs = firebase.storage().ref().child(filename);\n            refs.put(blob).then(function (snapshot) {\n              firebase.storage().ref(filename).getDownloadURL().then(function (url) {\n                setImageURL(url);\n                var user = props.route.params.user.email;\n                firebase.firestore().collection('users').doc(user).update({\n                  picture: url\n                });\n              });\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var openImagePicker = function openImagePicker() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePicker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 5:\n            pickerResult = _context2.sent;\n            setImage(pickerResult.uri);\n\n            if (!pickerResult.cancelled) {\n              uploadImage(pickerResult.uri);\n            }\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var allowDrop = function allowDrop(event) {\n    $(\".dropzone\").addClass(\"highlighted-drop\");\n    event.preventDefault();\n  };\n\n  var removeColor = function removeColor(event) {\n    $(\".dropzone\").removeClass(\"highlighted-drop\");\n  };\n\n  var dropped = function dropped(event) {\n    event.preventDefault();\n    var dataTransferItemsList = [];\n\n    if (event.dataTransfer) {\n      console.log('pic', event.dataTransfer);\n      var dt = event.dataTransfer;\n\n      if (dt.files && dt.files.length) {\n        dataTransferItemsList = dt.files;\n      } else if (dt.items && dt.items.length) {\n        dataTransferItemsList = dt.items;\n      }\n    }\n\n    if (event.target && event.target.files) {\n      dataTransferItemsList = event.target.files;\n      console.log('bolly', event.target.files);\n    }\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    onClick: openImagePicker,\n    onDragOver: setColor('blue'),\n    onDragEnter: function onDragEnter(event) {\n      return dropped(event);\n    },\n    onDrop: function onDrop(event) {\n      return dropped(event);\n    },\n    onDragLeave: setColor('black'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    mode: \"outlined\",\n    color: \"black\",\n    onPress: openImagePicker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Upload Image\"), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    marginTop: 30,\n    minHeight: 150,\n    border: '2px dashed black',\n    cursor: 'pointer'\n  }\n});","map":{"version":3,"sources":["/Users/rando/Desktop/impress/screens/ImageScreen.js"],"names":["React","useState","useEffect","WebBrowser","ImagePicker","Button","firebase","ImageScreen","props","image","setImage","url","setImageURL","uploadImage","uri","fetch","response","blob","filename","Math","round","random","refs","storage","ref","child","put","then","snapshot","getDownloadURL","user","route","params","email","firestore","collection","doc","update","picture","openImagePicker","requestMediaLibraryPermissionsAsync","permissionResult","launchImageLibraryAsync","pickerResult","cancelled","allowDrop","event","$","addClass","preventDefault","removeColor","removeClass","dropped","dataTransferItemsList","dataTransfer","console","log","dt","files","length","items","target","styles","container","setColor","width","height","StyleSheet","create","alignItems","marginTop","minHeight","border","cursor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport * as WebBrowser from \"expo-web-browser\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Image, StyleSheet, Text, View } from \"react-native\";\nimport Button from './Button'\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\nexport default function ImageScreen(props) {\n\n  const [image, setImage] = useState(null);\n  const [url, setImageURL] = useState(\"\");\n\n  const uploadImage = async (uri) => {\n    const response = await fetch(uri);\n    const blob = await response.blob();\n\n    var filename = \"images/\" + \"IMG\" + Math.round(Math.random()*100)\n\n    var refs = firebase.storage().ref().child(filename);\n    refs.put(blob).then((snapshot) => {\n      firebase.storage().ref(filename).getDownloadURL()\n        .then((url) => {\n          setImageURL(url);\n          var user = props.route.params.user.email\n          firebase.firestore().collection('users').doc(user).update({\n            picture: url\n          })\n      })\n\n    })\n\n  }\n\n  let openImagePicker = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n\n    setImage(pickerResult.uri);\n\n    if (!pickerResult.cancelled) {\n      uploadImage(pickerResult.uri)\n    }\n  }\n\n  const allowDrop = (event) => {\n    $(\".dropzone\").addClass(\"highlighted-drop\");\n    event.preventDefault();\n  }\n\n  const removeColor = (event) => {\n    $(\".dropzone\").removeClass(\"highlighted-drop\");\n  }\n\n  const dropped = (event) => {\n    event.preventDefault();\n    let dataTransferItemsList = []\n    if (event.dataTransfer) {\n      console.log('pic', event.dataTransfer);\n      const dt = event.dataTransfer\n      if (dt.files && dt.files.length) {\n        dataTransferItemsList = dt.files\n      } else if (dt.items && dt.items.length) {\n        dataTransferItemsList = dt.items\n      }\n    } \n\n    if (event.target && event.target.files) {\n      dataTransferItemsList = event.target.files\n      console.log('bolly', event.target.files);\n    }\n  }\n\n  \n  return (\n      <View style={styles.container}\n        onClick={openImagePicker}\n        onDragOver={setColor('blue')}\n        onDragEnter={(event) => dropped(event)}\n        onDrop={(event) => dropped(event)}\n        onDragLeave={setColor('black')}\n      >\n      <Button\n        mode=\"outlined\"\n        color=\"black\"\n        onPress={openImagePicker}>Upload Image</Button>\n        {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n      </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    marginTop: 30,\n    minHeight: 150,\n    border: '2px dashed black',\n    cursor: 'pointer',\n  }\n})\n\n"]},"metadata":{},"sourceType":"module"}