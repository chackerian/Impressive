{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"language\", \"extraParams\", \"clientSecret\"],\n    _excluded2 = [\"extraParams\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { useMemo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useAuthRequestResult, useLoadedAuthRequest } from \"../AuthRequestHooks\";\nimport { AuthRequest, makeRedirectUri, ResponseType } from \"../AuthSession\";\nimport { generateHexStringAsync } from \"../PKCE\";\nimport { applyRequiredScopes, useProxyEnabled } from \"./ProviderUtils\";\nvar settings = {\n  windowFeatures: {\n    width: 700,\n    height: 600\n  },\n  minimumScopes: ['public_profile', 'email']\n};\nexport var discovery = {\n  authorizationEndpoint: 'https://www.facebook.com/v6.0/dialog/oauth',\n  tokenEndpoint: 'https://graph.facebook.com/v6.0/oauth/access_token'\n};\n\nvar FacebookAuthRequest = function (_AuthRequest) {\n  _inherits(FacebookAuthRequest, _AuthRequest);\n\n  var _super = _createSuper(FacebookAuthRequest);\n\n  function FacebookAuthRequest(_ref) {\n    var language = _ref.language,\n        _ref$extraParams = _ref.extraParams,\n        extraParams = _ref$extraParams === void 0 ? {} : _ref$extraParams,\n        clientSecret = _ref.clientSecret,\n        config = _objectWithoutProperties(_ref, _excluded);\n\n    _classCallCheck(this, FacebookAuthRequest);\n\n    var inputParams = _objectSpread({\n      display: 'popup'\n    }, extraParams);\n\n    if (language) {\n      inputParams.locale = language;\n    }\n\n    var scopes = applyRequiredScopes(config.scopes, settings.minimumScopes);\n    var inputClientSecret;\n\n    if (config.responseType && config.responseType !== ResponseType.Code) {\n      inputClientSecret = clientSecret;\n    }\n\n    if (!config.responseType) {\n      config.responseType = ResponseType.Token;\n    }\n\n    return _super.call(this, _objectSpread(_objectSpread({}, config), {}, {\n      clientSecret: inputClientSecret,\n      scopes: scopes,\n      extraParams: inputParams\n    }));\n  }\n\n  _createClass(FacebookAuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: function getAuthRequestConfigAsync() {\n      var _await$_get$call, _await$_get$call$extr, extraParams, config;\n\n      return _regeneratorRuntime.async(function getAuthRequestConfigAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(_get(_getPrototypeOf(FacebookAuthRequest.prototype), \"getAuthRequestConfigAsync\", this).call(this));\n\n            case 2:\n              _await$_get$call = _context.sent;\n              _await$_get$call$extr = _await$_get$call.extraParams;\n              extraParams = _await$_get$call$extr === void 0 ? {} : _await$_get$call$extr;\n              config = _objectWithoutProperties(_await$_get$call, _excluded2);\n\n              if (!(!extraParams.nonce && !this.nonce)) {\n                _context.next = 12;\n                break;\n              }\n\n              if (this.nonce) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(generateHexStringAsync(16));\n\n            case 10:\n              this.nonce = _context.sent;\n\n            case 11:\n              extraParams.auth_nonce = this.nonce;\n\n            case 12:\n              return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, config), {}, {\n                extraParams: extraParams\n              }));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return FacebookAuthRequest;\n}(AuthRequest);\n\nexport function useAuthRequest() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var redirectUriOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var useProxy = useProxyEnabled(redirectUriOptions);\n  var clientId = useMemo(function () {\n    var _config$propertyName;\n\n    var propertyName = useProxy ? 'expoClientId' : Platform.select({\n      ios: 'iosClientId',\n      android: 'androidClientId',\n      default: 'webClientId'\n    });\n    return (_config$propertyName = config[propertyName]) != null ? _config$propertyName : config.clientId;\n  }, [useProxy, config.expoClientId, config.iosClientId, config.androidClientId, config.webClientId, config.clientId]);\n  var redirectUri = useMemo(function () {\n    if (typeof config.redirectUri !== 'undefined') {\n      return config.redirectUri;\n    }\n\n    return makeRedirectUri(_objectSpread({\n      native: \"fb\" + clientId + \"://authorize\",\n      useProxy: useProxy\n    }, redirectUriOptions));\n  }, [useProxy, clientId, config.redirectUri, redirectUriOptions]);\n  var extraParams = useMemo(function () {\n    var output = config.extraParams ? _objectSpread({}, config.extraParams) : {};\n\n    if (config.language) {\n      output.locale = config.language;\n    }\n\n    return output;\n  }, [config.extraParams, config.language]);\n  var request = useLoadedAuthRequest(_objectSpread(_objectSpread({}, config), {}, {\n    extraParams: extraParams,\n    clientId: clientId,\n    redirectUri: redirectUri\n  }), discovery, FacebookAuthRequest);\n\n  var _useAuthRequestResult = useAuthRequestResult(request, discovery, {\n    windowFeatures: settings.windowFeatures,\n    useProxy: useProxy\n  }),\n      _useAuthRequestResult2 = _slicedToArray(_useAuthRequestResult, 2),\n      result = _useAuthRequestResult2[0],\n      promptAsync = _useAuthRequestResult2[1];\n\n  return [request, result, promptAsync];\n}","map":{"version":3,"sources":["../../src/providers/Facebook.ts"],"names":[],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport { Platform } from 'react-native';\n\nimport { AuthRequestConfig } from '../AuthRequest.types';\nimport { useAuthRequestResult, useLoadedAuthRequest } from '../AuthRequestHooks';\nimport {\n  AuthRequest,\n  AuthRequestPromptOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n  DiscoveryDocument,\n  makeRedirectUri,\n  ResponseType,\n} from '../AuthSession';\nimport { generateHexStringAsync } from '../PKCE';\nimport { ProviderAuthRequestConfig } from './Provider.types';\nimport { applyRequiredScopes, useProxyEnabled } from './ProviderUtils';\n\nconst settings = {\n  windowFeatures: { width: 700, height: 600 },\n  // These are required for Firebase to work properly which is a reasonable default.\n  minimumScopes: ['public_profile', 'email'],\n};\n\nexport const discovery: DiscoveryDocument = {\n  authorizationEndpoint: 'https://www.facebook.com/v6.0/dialog/oauth',\n  tokenEndpoint: 'https://graph.facebook.com/v6.0/oauth/access_token',\n};\n\nexport interface FacebookAuthRequestConfig extends ProviderAuthRequestConfig {\n  webClientId?: string;\n  iosClientId?: string;\n  androidClientId?: string;\n  expoClientId?: string;\n}\n\nclass FacebookAuthRequest extends AuthRequest {\n  nonce?: string;\n\n  constructor({\n    language,\n    // Account selection cannot be reliably emulated on Facebook.\n    extraParams = {},\n    clientSecret,\n    ...config\n  }: FacebookAuthRequestConfig) {\n    const inputParams: Record<string, string> = {\n      display: 'popup',\n      ...extraParams,\n    };\n    if (language) {\n      inputParams.locale = language;\n    }\n\n    // Apply the default scopes\n    const scopes = applyRequiredScopes(config.scopes, settings.minimumScopes);\n    let inputClientSecret: string | undefined;\n    //  Facebook will throw if you attempt to use the client secret\n    if (config.responseType && config.responseType !== ResponseType.Code) {\n      // TODO: maybe warn that you shouldn't store the client secret on the client\n      inputClientSecret = clientSecret;\n    }\n    // Default to implicit auth\n    if (!config.responseType) {\n      config.responseType = ResponseType.Token;\n    }\n    super({\n      ...config,\n      clientSecret: inputClientSecret,\n      scopes,\n      extraParams: inputParams,\n    });\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    const { extraParams = {}, ...config } = await super.getAuthRequestConfigAsync();\n    if (!extraParams.nonce && !this.nonce) {\n      if (!this.nonce) {\n        this.nonce = await generateHexStringAsync(16);\n      }\n      extraParams.auth_nonce = this.nonce;\n    }\n    return {\n      ...config,\n      extraParams,\n    };\n  }\n}\n\n/**\n * Load an authorization request.\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes then the response will be fulfilled.\n *\n * - [Get Started](https://docs.expo.io/guides/authentication/#facebook)\n *\n * @param config\n * @param discovery\n */\nexport function useAuthRequest(\n  config: Partial<FacebookAuthRequestConfig> = {},\n  redirectUriOptions: Partial<AuthSessionRedirectUriOptions> = {}\n): [\n  FacebookAuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const useProxy = useProxyEnabled(redirectUriOptions);\n\n  const clientId = useMemo((): string => {\n    const propertyName = useProxy\n      ? 'expoClientId'\n      : Platform.select({\n          ios: 'iosClientId',\n          android: 'androidClientId',\n          default: 'webClientId',\n        });\n    return config[propertyName as any] ?? config.clientId;\n  }, [\n    useProxy,\n    config.expoClientId,\n    config.iosClientId,\n    config.androidClientId,\n    config.webClientId,\n    config.clientId,\n  ]);\n\n  const redirectUri = useMemo((): string => {\n    if (typeof config.redirectUri !== 'undefined') {\n      return config.redirectUri;\n    }\n\n    return makeRedirectUri({\n      // The redirect URI should be created using fb + client ID on native.\n      native: `fb${clientId}://authorize`,\n      useProxy,\n      ...redirectUriOptions,\n    });\n  }, [useProxy, clientId, config.redirectUri, redirectUriOptions]);\n\n  const extraParams = useMemo((): FacebookAuthRequestConfig['extraParams'] => {\n    const output = config.extraParams ? { ...config.extraParams } : {};\n\n    if (config.language) {\n      output.locale = config.language;\n    }\n    return output;\n  }, [config.extraParams, config.language]);\n\n  const request = useLoadedAuthRequest(\n    {\n      ...config,\n      extraParams,\n      clientId,\n      redirectUri,\n    },\n    discovery,\n    FacebookAuthRequest\n  );\n\n  const [result, promptAsync] = useAuthRequestResult(request, discovery, {\n    windowFeatures: settings.windowFeatures,\n    useProxy,\n  });\n\n  return [request, result, promptAsync];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}