{"ast":null,"code":"export var AppleAuthenticationScope;\n\n(function (AppleAuthenticationScope) {\n  AppleAuthenticationScope[AppleAuthenticationScope[\"FULL_NAME\"] = 0] = \"FULL_NAME\";\n  AppleAuthenticationScope[AppleAuthenticationScope[\"EMAIL\"] = 1] = \"EMAIL\";\n})(AppleAuthenticationScope || (AppleAuthenticationScope = {}));\n\nexport var AppleAuthenticationOperation;\n\n(function (AppleAuthenticationOperation) {\n  AppleAuthenticationOperation[AppleAuthenticationOperation[\"IMPLICIT\"] = 0] = \"IMPLICIT\";\n  AppleAuthenticationOperation[AppleAuthenticationOperation[\"LOGIN\"] = 1] = \"LOGIN\";\n  AppleAuthenticationOperation[AppleAuthenticationOperation[\"REFRESH\"] = 2] = \"REFRESH\";\n  AppleAuthenticationOperation[AppleAuthenticationOperation[\"LOGOUT\"] = 3] = \"LOGOUT\";\n})(AppleAuthenticationOperation || (AppleAuthenticationOperation = {}));\n\nexport var AppleAuthenticationCredentialState;\n\n(function (AppleAuthenticationCredentialState) {\n  AppleAuthenticationCredentialState[AppleAuthenticationCredentialState[\"REVOKED\"] = 0] = \"REVOKED\";\n  AppleAuthenticationCredentialState[AppleAuthenticationCredentialState[\"AUTHORIZED\"] = 1] = \"AUTHORIZED\";\n  AppleAuthenticationCredentialState[AppleAuthenticationCredentialState[\"NOT_FOUND\"] = 2] = \"NOT_FOUND\";\n  AppleAuthenticationCredentialState[AppleAuthenticationCredentialState[\"TRANSFERRED\"] = 3] = \"TRANSFERRED\";\n})(AppleAuthenticationCredentialState || (AppleAuthenticationCredentialState = {}));\n\nexport var AppleAuthenticationUserDetectionStatus;\n\n(function (AppleAuthenticationUserDetectionStatus) {\n  AppleAuthenticationUserDetectionStatus[AppleAuthenticationUserDetectionStatus[\"UNSUPPORTED\"] = 0] = \"UNSUPPORTED\";\n  AppleAuthenticationUserDetectionStatus[AppleAuthenticationUserDetectionStatus[\"UNKNOWN\"] = 1] = \"UNKNOWN\";\n  AppleAuthenticationUserDetectionStatus[AppleAuthenticationUserDetectionStatus[\"LIKELY_REAL\"] = 2] = \"LIKELY_REAL\";\n})(AppleAuthenticationUserDetectionStatus || (AppleAuthenticationUserDetectionStatus = {}));\n\nexport var AppleAuthenticationButtonType;\n\n(function (AppleAuthenticationButtonType) {\n  AppleAuthenticationButtonType[AppleAuthenticationButtonType[\"SIGN_IN\"] = 0] = \"SIGN_IN\";\n  AppleAuthenticationButtonType[AppleAuthenticationButtonType[\"CONTINUE\"] = 1] = \"CONTINUE\";\n  AppleAuthenticationButtonType[AppleAuthenticationButtonType[\"SIGN_UP\"] = 2] = \"SIGN_UP\";\n})(AppleAuthenticationButtonType || (AppleAuthenticationButtonType = {}));\n\nexport var AppleAuthenticationButtonStyle;\n\n(function (AppleAuthenticationButtonStyle) {\n  AppleAuthenticationButtonStyle[AppleAuthenticationButtonStyle[\"WHITE\"] = 0] = \"WHITE\";\n  AppleAuthenticationButtonStyle[AppleAuthenticationButtonStyle[\"WHITE_OUTLINE\"] = 1] = \"WHITE_OUTLINE\";\n  AppleAuthenticationButtonStyle[AppleAuthenticationButtonStyle[\"BLACK\"] = 2] = \"BLACK\";\n})(AppleAuthenticationButtonStyle || (AppleAuthenticationButtonStyle = {}));","map":{"version":3,"sources":["../src/AppleAuthentication.types.ts"],"names":[],"mappings":"AAqKA,OAAA,IAAY,wBAAZ;;AAAA,CAAA,UAAY,wBAAZ,EAAoC;AAClC,EAAA,wBAAA,CAAA,wBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,EAAA,wBAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACD,CAHD,EAAY,wBAAwB,KAAxB,wBAAwB,GAAA,EAAA,CAApC;;AAKA,OAAA,IAAY,4BAAZ;;AAAA,CAAA,UAAY,4BAAZ,EAAwC;AAItC,EAAA,4BAAA,CAAA,4BAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,4BAAA,CAAA,4BAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,EAAA,4BAAA,CAAA,4BAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,4BAAA,CAAA,4BAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CARD,EAAY,4BAA4B,KAA5B,4BAA4B,GAAA,EAAA,CAAxC;;AAiBA,OAAA,IAAY,kCAAZ;;AAAA,CAAA,UAAY,kCAAZ,EAA8C;AAC5C,EAAA,kCAAA,CAAA,kCAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,kCAAA,CAAA,kCAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA,EAAA,kCAAA,CAAA,kCAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,EAAA,kCAAA,CAAA,kCAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACD,CALD,EAAY,kCAAkC,KAAlC,kCAAkC,GAAA,EAAA,CAA9C;;AAgBA,OAAA,IAAY,sCAAZ;;AAAA,CAAA,UAAY,sCAAZ,EAAkD;AAChD,EAAA,sCAAA,CAAA,sCAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACA,EAAA,sCAAA,CAAA,sCAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,sCAAA,CAAA,sCAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACD,CAJD,EAAY,sCAAsC,KAAtC,sCAAsC,GAAA,EAAA,CAAlD;;AASA,OAAA,IAAY,6BAAZ;;AAAA,CAAA,UAAY,6BAAZ,EAAyC;AACvC,EAAA,6BAAA,CAAA,6BAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,6BAAA,CAAA,6BAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AAIA,EAAA,6BAAA,CAAA,6BAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACD,CAPD,EAAY,6BAA6B,KAA7B,6BAA6B,GAAA,EAAA,CAAzC;;AAYA,OAAA,IAAY,8BAAZ;;AAAA,CAAA,UAAY,8BAAZ,EAA0C;AACxC,EAAA,8BAAA,CAAA,8BAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,EAAA,8BAAA,CAAA,8BAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA;AACA,EAAA,8BAAA,CAAA,8BAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACD,CAJD,EAAY,8BAA8B,KAA9B,8BAA8B,GAAA,EAAA,CAA1C","sourcesContent":["import { StyleProp, ViewStyle } from 'react-native';\n\nexport type AppleAuthenticationButtonProps = {\n  onPress: () => void;\n  buttonType: AppleAuthenticationButtonType;\n  buttonStyle: AppleAuthenticationButtonStyle;\n  cornerRadius?: number;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * The options you can supply when making a call to `AppleAuthentication.signInAsync()`. None of\n * these options are required.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest)\n * for more details.\n */\nexport type AppleAuthenticationSignInOptions = {\n  /**\n   * The scope of personal information to which your app is requesting access. The user can choose\n   * to deny your app access to any scope at the time of logging in.\n   * @defaults `[]` (no scopes).\n   */\n  requestedScopes?: AppleAuthenticationScope[];\n\n  /**\n   * Data that's returned to you unmodified in the corresponding credential after a successful\n   * authentication. Used to verify that the response was from the request you made. Can be used to\n   * avoid replay attacks.\n   */\n  state?: string;\n\n  /**\n   * Data that is used to verify the uniqueness of a response and prevent replay attacks.\n   */\n  nonce?: string;\n};\n\n/**\n * The options you can supply when making a call to `AppleAuthentication.refreshAsync()`. You must\n * include the ID string of the user whose credentials you'd like to refresh.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest)\n * for more details.\n */\nexport type AppleAuthenticationRefreshOptions = {\n  user: string;\n\n  /**\n   * The scope of personal information to which your app is requesting access. The user can choose\n   * to deny your app access to any scope at the time of refreshing.\n   * @defaults `[]` (no scopes).\n   */\n  requestedScopes?: AppleAuthenticationScope[];\n\n  /**\n   * Data that's returned to you unmodified in the corresponding credential after a successful\n   * authentication. Used to verify that the response was from the request you made. Can be used to\n   * avoid replay attacks.\n   */\n  state?: string;\n};\n\n/**\n * The options you can supply when making a call to `AppleAuthentication.signOutAsync()`. You must\n * include the ID string of the user to sign out.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest)\n * for more details.\n */\nexport type AppleAuthenticationSignOutOptions = {\n  user: string;\n\n  /**\n   * Data that's returned to you unmodified in the corresponding credential after a successful\n   * authentication. Used to verify that the response was from the request you made. Can be used to\n   * avoid replay attacks.\n   */\n  state?: string;\n};\n\n/**\n * The user credentials returned from a successful call to `AppleAuthentication.signInAsync()`,\n * `AppleAuthentication.refreshAsync()`, or `AppleAuthentication.signOutAsync()`.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidcredential)\n * for more details.\n */\nexport type AppleAuthenticationCredential = {\n  /**\n   * An identifier associated with the authenticated user. You can use this to check if the user is\n   * still authenticated later. This is stable and can be shared across apps released under the same\n   * development team. The same user will have a different identifier for apps released by other\n   * developers.\n   */\n  user: string;\n\n  /**\n   * An arbitrary string that your app provided as `state` in the request that generated the\n   * credential. Used to verify that the response was from the request you made. Can be used to\n   * avoid replay attacks.\n   */\n  state: string | null;\n\n  /**\n   * The user's name. May be `null` or contain `null` values if you didn't request the `FULL_NAME`\n   * scope, if the user denied access, or if this is not the first time the user has signed into\n   * your app.\n   */\n  fullName: AppleAuthenticationFullName | null;\n\n  /**\n   * The user's email address. Might not be present if you didn't request the `EMAIL` scope. May\n   * also be null if this is not the first time the user has signed into your app. If the user chose\n   * to withhold their email address, this field will instead contain an obscured email address with\n   * an Apple domain.\n   */\n  email: string | null;\n\n  /**\n   * A value that indicates whether the user appears to the system to be a real person.\n   */\n  realUserStatus: AppleAuthenticationUserDetectionStatus;\n\n  /**\n   * A JSON Web Token (JWT) that securely communicates information about the user to your app.\n   */\n  identityToken: string | null;\n\n  /**\n   * A short-lived session token used by your app for proof of authorization when interacting with\n   * the app's server counterpart. Unlike `user`, this is ephemeral and will change each session.\n   */\n  authorizationCode: string | null;\n};\n\n/**\n * An object representing the tokenized portions of the user's full name.\n */\nexport type AppleAuthenticationFullName = {\n  namePrefix: string | null;\n  givenName: string | null;\n  middleName: string | null;\n  familyName: string | null;\n  nameSuffix: string | null;\n  nickname: string | null;\n};\n\nexport type AppleAuthenticationRevokeListener = () => void;\n\n/**\n * Scopes you can request when calling `AppleAuthentication.signInAsync()` or\n * `AppleAuthentication.refreshAsync()`.\n *\n * @note Note that it is possible that you will not be granted all of the scopes which you request.\n * You will still need to handle null values for any fields you request.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationscope)\n * for more details.\n */\nexport enum AppleAuthenticationScope {\n  FULL_NAME = 0,\n  EMAIL = 1,\n}\n\nexport enum AppleAuthenticationOperation {\n  /**\n   * An operation that depends on the particular kind of credential provider.\n   */\n  IMPLICIT = 0,\n  LOGIN = 1,\n  REFRESH = 2,\n  LOGOUT = 3,\n}\n\n/**\n * The state of the credential when checked with `AppleAuthentication.getCredentialStateAsync()`.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidprovidercredentialstate)\n * for more details.\n */\nexport enum AppleAuthenticationCredentialState {\n  REVOKED = 0,\n  AUTHORIZED = 1,\n  NOT_FOUND = 2,\n  TRANSFERRED = 3,\n}\n\n/**\n * A value that indicates whether the user appears to be a real person. You get this in the\n * realUserStatus property of a `Credential` object. It can be used as one metric to help prevent\n * fraud.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asuserdetectionstatus)\n * for more details.\n */\nexport enum AppleAuthenticationUserDetectionStatus {\n  UNSUPPORTED = 0,\n  UNKNOWN = 1,\n  LIKELY_REAL = 2,\n}\n\n/**\n * Controls the predefined text shown on the authentication button.\n */\nexport enum AppleAuthenticationButtonType {\n  SIGN_IN = 0,\n  CONTINUE = 1,\n  /**\n   * Requires iOS 13.2 or later.\n   */\n  SIGN_UP = 2,\n}\n\n/**\n * Controls the predefined style of the authenticating button.\n */\nexport enum AppleAuthenticationButtonStyle {\n  WHITE = 0,\n  WHITE_OUTLINE = 1,\n  BLACK = 2,\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}